From 9c3f3a06d3592de5563228ad72a97e22464acb59 Mon Sep 17 00:00:00 2001
From: maxwen <max.weninger@gmail.com>
Date: Tue, 10 Mar 2015 01:36:22 +0100
Subject: [PATCH] init: added exec_context call

same as exec but allow passing a seliux context
as first parameter

Change-Id: Iad62005e6dff5f6d9168111c32c783432f86ac2d
---
 init/builtins.c    | 29 ++++++++++++++++++++++++++++-
 init/init_parser.c |  1 +
 init/keywords.h    |  2 ++
 3 files changed, 31 insertions(+), 1 deletion(-)

diff --git a/init/builtins.c b/init/builtins.c
index 9ceebb3..c4b1b51 100644
--- a/init/builtins.c
+++ b/init/builtins.c
@@ -54,6 +54,8 @@ int add_environment(const char *name, const char *value);
 extern int init_module(void *, unsigned long, const char *);
 extern int init_export_rc_file(const char *);
 
+static int do_exec_internal(int nargs, char **args, int context);
+
 static int write_file(const char *path, const char *value)
 {
     int fd, ret, len;
@@ -274,9 +276,20 @@ int do_enable(int nargs, char **args)
 #define MAX_PARAMETERS 64
 int do_exec(int nargs, char **args)
 {
+    return do_exec_internal(nargs, args, 0);
+}
+
+int do_exec_context(int nargs, char **args)
+{
+    return do_exec_internal(nargs, args, 1);
+}
+
+static int do_exec_internal(int nargs, char **args, int context)
+{
     pid_t pid;
     int status, i, j;
     char *par[MAX_PARAMETERS];
+    char* contextParam = NULL;
     char prop_val[PROP_VALUE_MAX];
     int len;
 
@@ -285,7 +298,14 @@ int do_exec(int nargs, char **args)
         return -1;
     }
 
-    for(i=0, j=1; i<(nargs-1) ;i++,j++)
+    i=0;
+    j=1;
+    if(context)
+    {
+        contextParam = args[j];
+        j++;
+    }
+    for(;i<(nargs-1) ;i++,j++)
     {
         if ((args[j])
             &&
@@ -316,6 +336,13 @@ int do_exec(int nargs, char **args)
         get_property_workspace(&fd, &sz);
         sprintf(tmp, "%d,%d", dup(fd), sz);
         setenv("ANDROID_PROPERTY_WORKSPACE", tmp, 1);
+
+        if (context && contextParam != NULL) {
+            if (is_selinux_enabled() > 0 && setexeccon(contextParam) < 0) {
+                ERROR("cannot setexeccon('%s'): %s\n", contextParam, strerror(errno));
+                _exit(127);
+            }
+        }
         execve(par[0], par, environ);
         exit(0);
     }
diff --git a/init/init_parser.c b/init/init_parser.c
index eec9090..1b0bfca 100644
--- a/init/init_parser.c
+++ b/init/init_parser.c
@@ -101,6 +101,7 @@ static int lookup_keyword(const char *s)
         if (!strcmp(s, "xec")) return K_exec;
         if (!strcmp(s, "xport")) return K_export;
         if (!strcmp(s, "xport_rc")) return K_export_rc;
+        if (!strcmp(s, "xec_context")) return K_exec_context;
         break;
     case 'g':
         if (!strcmp(s, "roup")) return K_group;
diff --git a/init/keywords.h b/init/keywords.h
index 224a505..e029e5a 100644
--- a/init/keywords.h
+++ b/init/keywords.h
@@ -8,6 +8,7 @@ int do_class_reset(int nargs, char **args);
 int do_domainname(int nargs, char **args);
 int do_enable(int nargs, char **args);
 int do_exec(int nargs, char **args);
+int do_exec_context(int nargs, char **args);
 int do_export(int nargs, char **args);
 int do_export_rc(int nargs, char **args);
 int do_hostname(int nargs, char **args);
@@ -62,6 +63,7 @@ enum {
     KEYWORD(domainname,  COMMAND, 1, do_domainname)
     KEYWORD(enable,      COMMAND, 1, do_enable)
     KEYWORD(exec,        COMMAND, 1, do_exec)
+    KEYWORD(exec_context,    COMMAND, 2, do_exec_context)
     KEYWORD(export,      COMMAND, 2, do_export)
     KEYWORD(export_rc,   COMMAND, 1, do_export_rc)
     KEYWORD(group,       OPTION,  0, 0)
-- 
1.9.1

